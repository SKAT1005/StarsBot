import os
import random
import threading
import time

import django
from django.utils import timezone

import buttons

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'StarsBot.settings')
django.setup()
from const import bot
from app.models import User, Task, UserTask, Refferal_reward, Promocode, DayReward

Refferal_reward.objects.get_or_create(id=1)
DayReward.objects.get_or_create(id=1)


def check_subscribes():
    while True:
        for user in User.objects.all():
            for task in user.tasks.all():
                if timezone.now().timestamp() < task.end_time.timestamp():
                    if not check_subscribe(chat_id=user.chat_id, channel_id=task.task.channel_id):
                        bot.send_message(chat_id=user.chat_id,
                                         text=f'–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {task.task.reward}‚≠êÔ∏è –∑–∞ –æ—Ç–ø–∏—Å–∫—É –æ—Ç –∫–∞–Ω–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤')
                        user.balance -= task.task.reward
                        user.save(update_fields=['balance'])
                        task.delete()
                else:
                    task.delete()
        time.sleep(60 * 30)


def null_day_ref():
    while True:
        for user in User.objects.all():
            user.referral_per_day = 0
            user.save(update_fields=['referral_per_day'])
        time.sleep(60 * 60 * 24)


def check_subscribe(chat_id, channel_id):
    try:
        n = bot.get_chat_member(chat_id=channel_id, user_id=chat_id)
        if n.status == 'left':
            return False
    except Exception:
        return False
    return True


def check_start_subscrbe(user):
    for task in Task.objects.filter(is_first_task=True):
        if not check_subscribe(user.chat_id, task.channel_id):
            user.complete_first_task = False
            user.save(update_fields=['complete_first_task'])
            return False
    user.complete_first_task = True
    user.save(update_fields=['complete_first_task'])
    return True


def not_subscribed(chat_id):
    bot.send_message(chat_id=chat_id, text='–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.',
                     reply_markup=buttons.not_subscribed())


def tasks(chat_id):
    text = '‚úÖ–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π –∑–∞ —ç—Ç–æ –∑–≤–µ–∑–¥—ã üåü'
    bot.send_photo(chat_id=chat_id, photo=open('photos/task.jpg', 'rb'), caption=text, reply_markup=buttons.tasks())


def detail_task(chat_id, task_id):
    text = 'üéØ–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!'
    bot.send_message(chat_id=chat_id, text=text, reply_markup=buttons.task_dtail(task_id))


def collect_stars(chat_id):
    reward = Refferal_reward.objects.all().first().reward
    text = f'–ü–æ–ª—É—á–∏ {reward} ‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚ÄºÔ∏è\n\n' \
           f'–ü–æ –Ω–µ–π —Ç—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π/–∑–Ω–∞–∫–æ–º—ã—Ö üí´\n' \
           f'–ù—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö\n' \
           f'–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ üîó: `https://t.me/{bot.get_me().username}?start={chat_id}`'

    bot.send_photo(chat_id=chat_id, photo=open('photos/collect_stars.jpg', 'rb'), caption=text, parse_mode='MarkDownV2')


@bot.message_handler(commands=['start'])
def start(message):
    username = message.from_user.username
    if not username:
        username = '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    user, _ = User.objects.get_or_create(chat_id=message.from_user.id, username=username)
    if _ and len(message.text.split()) == 2:
        ref = User.objects.filter(chat_id=message.text.split()[1]).first()
        if ref:
            ref.referral.add(user)
            ref.referral_count += 1
            ref.referral_per_day += 1
            ref.balance += Refferal_reward.objects.all().first().reward
            ref.save(update_fields=['referral_count', 'referral_per_day'])
    not_subscribed(chat_id=user.chat_id)


def menu(chat_id):
    bot.send_message(chat_id=chat_id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=buttons.buttons())


def top(chat_id, param, text):
    users = list(User.objects.all().order_by(f'-{param}'))[:10]
    text = f'–¢–æ–ø 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ {text}:\n\n'
    if '–≤—Å–µ –≤—Ä–µ–º—è' in text:
        for i, user in enumerate(users, start=1):
            text += f'{i}. @{user.username} - {user.referral_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n'
        bot.send_photo(chat_id=chat_id, photo=open('photos/top.jpg', 'rb'), caption=text)
    else:
        for i, user in enumerate(users, start=1):
            text += f'{i}. @{user.username} - {user.referral_per_day} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n'
        bot.send_photo(chat_id=chat_id, photo=open('photos/top_24.jpg', 'rb'), caption=text)


def profile(user):
    text = f'üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n'
    text += f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚§µÔ∏è\n\n'
    text += f'‚ú® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞:: {user.referral_per_day}\n\n'
    text += f'üìà –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user.referral_per_day}\n\n'
    text += f'üåü–ë–∞–ª–∞–Ω—Å: üåü {round(user.balance, 2)}‚≠êÔ∏èÔ∏è\n\n'
    bot.send_photo(chat_id=user.chat_id, photo=open('photos/profile.jpg', 'rb'), caption=text)


def exit_stars(message, user):
    if message.content_type == 'text':
        if message.text in ['–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã ‚≠ê', '–ü—Ä–æ—Ñ–∏–ª—å üë§', '—Ä–∞—Å—Å—ã–ª–∫–∞', '–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìä', '–ó–∞–¥–∞–Ω–∏—è üìö',
                            '–í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã üåü', '–ü—Ä–æ–º–æ–∫–æ–¥ üéÅ', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ‚è∞']:
            text_handler(None, message.text, user.chat_id)
        else:
            try:
                error = '–ú—ã –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥—ã –Ω–∞ —Å—É–º–º—ã: 15 ‚≠êÔ∏è, 25 ‚≠êÔ∏è, 50 ‚≠êÔ∏è, 100 ‚≠êÔ∏è –∏ –≤—ã—à–µ'
                stars = int(message.text)
                if stars > user.balance:
                    error = '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ'
                    raise Exception
                if stars < 100 and stars not in [15, 25, 50, 100]:
                    raise Exception
            except Exception:
                msg = bot.send_message(chat_id=user.chat_id, text=error, reply_markup=buttons.go_to_menu())
                bot.register_next_step_handler(msg, exit_stars, user)
            else:
                user.balance -= stars
                user.freeze_balance += stars
                user.save(update_fields=['balance', 'freeze_balance'])
                admin = random.choice(User.objects.filter(is_admin=True))
                bot.send_message(chat_id=admin.chat_id, text=f'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {stars}‚≠êÔ∏è',
                                 reply_markup=buttons.admin_message(stars=stars, chat_id=user.chat_id))


def mailing(message):
    message_id = message.id
    from_chat_id = message.chat.id
    for user in User.objects.all():
        try:
            bot.copy_message(message_id=message_id, chat_id=user.chat_id, from_chat_id=from_chat_id)
        except Exception:
            continue


def promocode(message, user):
    if message.content_type == 'text':
        if message.text in ['–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã ‚≠ê', '–ü—Ä–æ—Ñ–∏–ª—å üë§', '—Ä–∞—Å—Å—ã–ª–∫–∞', '–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìä', '–ó–∞–¥–∞–Ω–∏—è üìö',
                            '–í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã üåü', '–ü—Ä–æ–º–æ–∫–æ–¥ üéÅ', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ‚è∞']:
            text_handler(None, message.text, user.chat_id)
        else:
            promocode = message.text
            try:
                promo = Promocode.objects.get(name=promocode)
                if user in promo.users.all():
                    bot.send_message(chat_id=user.chat_id, text='–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')
                else:
                    promo.users.add(user)
                    user.balance += promo.reward
                    user.save(update_fields=['balance'])
                    bot.send_message(chat_id=user.chat_id,
                                     text=f'–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo.reward}‚≠êÔ∏è')
                    if promo.users.all().count() == promo.max_user:
                        promo.delete()
            except Exception:
                bot.send_message(chat_id=user.chat_id, text='–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')


def day_bonus(user):
    day_bonus = DayReward.objects.get(id=1)
    if user.referral_per_day >= day_bonus.min_referral:
        user.balance += day_bonus.reward
        user.use_day_bonus = True
        user.save(update_fields=['balance', 'use_day_bonus'])
        bot.send_photo(chat_id=user.chat_id, photo=open('photos/day_bonus.jpg', 'rb'),
                       caption=f'üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {day_bonus.reward} –∑–≤–µ–∑–¥—ã üåüÔ∏è')
    else:
        bot.send_photo(chat_id=user.chat_id, photo=open('photos/day_bonus.jpg', 'rb'),
                       caption=f'üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏ {day_bonus.min_referral} –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {day_bonus.reward} –∑–≤–µ–∑–¥—ã üåü')


@bot.message_handler(content_types='text')
def text_handler(message, command=None, chat_id=None):
    if not command:
        chat_id = message.from_user.id
        command = message.text
    user = User.objects.get(chat_id=chat_id)
    if not check_start_subscrbe(user):
        not_subscribed(chat_id=chat_id)
    elif command == '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã ‚≠êÔ∏è':
        collect_stars(chat_id=chat_id)
    elif command == '–ü—Ä–æ—Ñ–∏–ª—å üë§':
        profile(user)
    elif command == '–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìä':
        bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—åüëá', reply_markup=buttons.top())
    elif command == '–ó–∞–¥–∞–Ω–∏—è üìö':
        tasks(chat_id=chat_id)
    elif command == '–í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã üåü':
        text = "üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 15‚≠êÔ∏è\n\n" \
               f"–¢–∞–∫-–∂–µ –º—ã –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥—ã –Ω–∞ —Å—É–º–º—ã: 15 ‚≠êÔ∏è, 25 ‚≠êÔ∏è, 50 ‚≠êÔ∏è, 100 ‚≠êÔ∏è –∏ –≤—ã—à–µ\n\n" \
               f"‚ùóÔ∏è–ï—Å–ª–∏ –≤–∞—à –≤—ã–≤–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—É–º–º—É, –æ–Ω –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º‚ùóÔ∏è\n\n" \
               "‚ÄºÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—É–º–º—É –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:"
        msg = bot.send_photo(chat_id=chat_id, photo=open('photos/exit_stars.jpg', 'rb'), caption=text)
        bot.register_next_step_handler(msg, exit_stars, user)
    elif command == '—Ä–∞—Å—Å—ã–ª–∫–∞' and user.is_admin:
        msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
        bot.register_next_step_handler(msg, mailing)
    elif command == '–ü—Ä–æ–º–æ–∫–æ–¥ üéÅ':
        msg = bot.send_photo(chat_id=chat_id, photo=open('photos/promo.jpg', 'rb'),
                             caption='‚ú®–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç –Ω–∞—Å –±–æ–Ω—É—Å üéÅ')
        bot.register_next_step_handler(msg, promocode, user)
    elif command == '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ‚è∞':
        day_bonus(user)
    elif command == '122222':
        pass


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    chat_id = call.message.chat.id
    user, _ = User.objects.get_or_create(chat_id=chat_id)
    if call.message:
        data = call.data.split('|')
        bot.clear_step_handler_by_chat_id(chat_id=chat_id)
        if not check_start_subscrbe(user):
            not_subscribed(chat_id=chat_id)
        if data[0] == 'check_start_subsctibes':
            menu(chat_id=chat_id)
        elif data[0] == 'task':
            detail_task(chat_id=chat_id, task_id=data[1])
        elif data[0] == 'check_subsctibe':
            task = Task.objects.get(id=data[1])
            if check_subscribe(chat_id=chat_id, channel_id=task.channel_id):
                if not user.tasks.filter(task=task).exists():
                    user.tasks.add(UserTask.objects.create(task=task))
                    reward = task.reward
                    user.balance += reward
                    user.save(update_fields=['balance'])
                    bot.send_message(chat_id=chat_id, text='–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω')
                else:
                    bot.send_message(chat_id=chat_id, text='–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ')
                time.sleep(1)
                tasks(chat_id=chat_id)
            else:
                bot.send_message(chat_id=chat_id, text='–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
                time.sleep(1)
                detail_task(chat_id=chat_id, task_id=data[1])
        elif data[0] == 'tasks':
            tasks(chat_id=chat_id)
        elif data[0] == 'all_top':
            top(chat_id=chat_id, param='referral_count', text='–≤—Å–µ –≤—Ä–µ–º—è')
        elif data[0] == 'day_top':
            top(chat_id=chat_id, param='referral_per_day', text='–≤—Å–µ 24 —á–∞—Å–∞')
        elif data[0] == 'back':
            menu(chat_id=chat_id)
        elif data[0] == 'approve':
            usr = User.objects.get(chat_id=data[1])
            usr.freeze_balance -= int(data[2])
            usr.save(update_fields=['freeze_balance'])
            bot.send_message(chat_id=usr.chat_id, text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞‚úÖ'
                                                       '–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ üöÄ')
        elif data[0] == 'cansel':
            usr = User.objects.get(chat_id=data[1])
            usr.freeze_balance -= int(data[2])
            usr.balance += int(data[2])
            usr.save(update_fields=['freeze_balance', 'balance'])
            bot.send_message(chat_id=usr.chat_id, text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')


if __name__ == '__main__':
    polling_thread1 = threading.Thread(target=null_day_ref)
    polling_thread1.start()
    polling_thread2 = threading.Thread(target=check_subscribes)
    polling_thread2.start()
    bot.infinity_polling(timeout=50, long_polling_timeout=25)
